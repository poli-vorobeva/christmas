{"version":3,"file":"main.js","mappings":"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","sources":["webpack://my-webpack-project/./src/common/controll.ts","webpack://my-webpack-project/./src/header/Header.ts","webpack://my-webpack-project/./src/settingsPage/filters/ValueSecton/ByColorFilter.ts","webpack://my-webpack-project/./src/settingsPage/filters/ValueSecton/ByShapeFilter.ts","webpack://my-webpack-project/./src/settingsPage/filters/ValueSecton/BySizeFilter.ts","webpack://my-webpack-project/./src/settingsPage/filters/ValueSecton/Favorite.ts","webpack://my-webpack-project/./src/settingsPage/filters/ValueSecton/ValueSection.ts","webpack://my-webpack-project/./src/settingsPage/filters/DiaposoneSection/DiaposonRange.ts","webpack://my-webpack-project/./src/settingsPage/filters/DiaposoneSection/DiaposoeElement.ts","webpack://my-webpack-project/./src/settingsPage/filters/DiaposoneSection/DiaposoneValue.ts","webpack://my-webpack-project/./src/settingsPage/filters/DiaposoneSection/DiaposoneYear.ts","webpack://my-webpack-project/./src/settingsPage/filters/DiaposoneSection/DianosoneSection.ts","webpack://my-webpack-project/./src/settingsPage/filters/SortSection/OptionElement.ts","webpack://my-webpack-project/./src/settingsPage/filters/SortSection/SortSection.ts","webpack://my-webpack-project/./src/settingsPage/filters/FilterContainer.ts","webpack://my-webpack-project/./src/settingsPage/decoration/ToyItem/ToyItem.ts","webpack://my-webpack-project/./src/settingsPage/decoration/DecorationSection.ts","webpack://my-webpack-project/./src/settingsPage/SettingsPage.ts","webpack://my-webpack-project/./src/Tree/chooseSection/chooseSection.ts","webpack://my-webpack-project/./src/Tree/ToyImage.ts","webpack://my-webpack-project/./src/Tree/canvasSection/MaskCanvas.ts","webpack://my-webpack-project/./src/Tree/canvasSection/Dot.ts","webpack://my-webpack-project/./src/Tree/canvasSection/createGirland.ts","webpack://my-webpack-project/./src/Tree/canvasSection/canvasSection.ts","webpack://my-webpack-project/./src/Tree/toysSection/toysSection.ts","webpack://my-webpack-project/./src/Tree/Tree.ts","webpack://my-webpack-project/./src/settingsPage/filters/FiltersModel.ts","webpack://my-webpack-project/./src/startPage/snowFlake.ts","webpack://my-webpack-project/./src/startPage/StartPage.ts","webpack://my-webpack-project/./src/app.ts","webpack://my-webpack-project/./src/index.ts"],"sourcesContent":["\r\nclass Control<NodeType extends HTMLElement = HTMLElement>{\r\n    setCanvasBackground(bgImageIndex: string) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    public node: NodeType;\r\n\r\n    constructor(parentNode: HTMLElement | null, tagName = 'div', className = '', content = '') {\r\n        const el = document.createElement(tagName);\r\n        el.className = className;\r\n        el.textContent = content;\r\n        if (parentNode) {\r\n            parentNode.append(el);\r\n        }\r\n        this.node = el as NodeType;\r\n    }\r\n\r\n    destroy(): void {\r\n        this.node.remove();\r\n    }\r\n\r\n}\r\n\r\nexport default Control;\r\n","import Control from \"../common/controll\";\r\nimport './Header.css'\r\n\r\nexport class Header extends Control{\r\n private settingsButton: Control<HTMLButtonElement>;\r\n  private treeButton: Control<HTMLButtonElement>;\r\n  public changePage:(pageName:string)=>void\r\n\r\n  constructor(parentNode:HTMLElement) {\r\n    super(parentNode,'header','header');\r\n    this.settingsButton=new Control(this.node,'button','headerNav','Настройки')\r\n    this.settingsButton.node.onclick=()=>{\r\n      this.toggleDisable(this.settingsButton.node,this.treeButton.node)    \r\n      this.changePage('settings')\r\n    }\r\n    this.treeButton=new Control(this.node,'button','headerNav','Елка')\r\n    this.treeButton.node.onclick=()=>{\r\n      this.toggleDisable(this.treeButton.node,this.settingsButton.node)\r\n      this.changePage('tree')\r\n    }\r\n  }\r\n  toggleDisable(currentButton:HTMLButtonElement,anotherButton:HTMLButtonElement){\r\n    currentButton.setAttribute('disabled','true')\r\n    if(anotherButton.getAttribute('disabled')==='true'){\r\n      anotherButton.removeAttribute('disabled')\r\n    }\r\n  }\r\n}","import Control from \"../../../common/controll\"\r\nexport class ByColorFilter extends Control {\r\n  onChooseColor: (color: string) => void\r\n  constructor(parentNode: HTMLElement) {\r\n    super(parentNode, 'div', 'byColor')\r\n    const colors = [\r\n      { color: 'желтый', rgb: 'rgb(250,250,0)' },\r\n      { color: 'белый', rgb: 'rgb(255,255,255)' },\r\n      { color: 'красный', rgb: 'rgb(255,0,0)' },\r\n      { color: 'синий', rgb: 'rgb(0,0,255)' },\r\n      { color: 'зелёный', rgb: 'rgb(0,255,0)' }\r\n    ]\r\n    const byColorText = new Control(this.node, 'span', 'byColorText', 'По цвету: ')\r\n    const colorCellsWrapper = new Control(this.node, 'div', 'colorCellsWrapper')\r\n    colors.forEach(color => {\r\n      const colorCell = new Control(colorCellsWrapper.node, 'div', 'colorCell')\r\n      colorCell.node.style.background = color.rgb\r\n      colorCell.node.onclick = () => {\r\n        colorCell.node.classList.toggle(\"colorCell-active\")\r\n        this.onChooseColor(color.color)\r\n      }\r\n    })\r\n\r\n  }\r\n}","import Control from \"../../../common/controll\"\r\nexport class ByShapeFilter extends Control {\r\n  onChooseShape:(shape:string)=>void\r\n  constructor(parentNode: HTMLElement) {\r\n    super(parentNode,'div', 'byShape')\r\n    const shapes = [\r\n      { shape: 'шар', src: './public/assets/svg/ball.svg' },\r\n      { shape: 'колокольчик', src: './public/assets/svg/bell.svg' },\r\n      { shape: 'шишка', src: './public/assets/svg/cone.svg' },\r\n      { shape: 'снежинка', src: './public/assets/svg/snowflake.svg' },\r\n      { shape: 'фигурка', src: './public/assets/svg/toy.svg' }\r\n    ]\r\n    const byShapeText = new Control(this.node, 'span', 'byFormText', 'По форме: ')\r\n    const shapesWrapper = new Control(this.node, 'div', 'shapesWrapper')\r\n    shapes.forEach(_shape => {\r\n      const shape = new Control(shapesWrapper.node, 'div', 'shapeCell')\r\n      shape.node.style.backgroundImage = `url(${_shape.src})`\r\n      shape.node.onclick = () => {\r\n        shape.node.classList.toggle('shapeCell-active')\r\n        this.onChooseShape(_shape.shape)\r\n      }\r\n    })\r\n  }\r\n}","import Control from \"../../../common/controll\"\r\nexport class BySizeFilter extends Control {\r\n  onChooseSize: (size: string) => void\r\n  constructor(parentNode: HTMLElement) {\r\n    super(parentNode, 'div', 'bySize')\r\n    const sizes = ['малый', 'средний', 'большой']\r\n    const bySizeText = new Control(this.node, 'span', 'bySizeText', 'По размеру: ')\r\n    const sizesWrapper = new Control(this.node, 'div', 'sizesWrapper')\r\n    sizes.forEach((_size, ind) => {\r\n      const size = new Control(sizesWrapper.node, 'div', 'sizeCell')\r\n      size.node.style.backgroundImage = 'url(./public/assets/svg/ball.svg)'\r\n      size.node.style.transform = `scale(${ind === 1 ? 1.2 : ind === 2 ? 1.4 : 1})`\r\n      size.node.onclick = () => {\r\n        size.node.classList.toggle('shapeCell-active')\r\n        this.onChooseSize(_size)\r\n      }\r\n    })\r\n  }\r\n}","import Control from '../../../common/controll'\r\nexport class Favorite extends Control {\r\n  constructor(parentNode: HTMLElement) {\r\n    super(parentNode, 'div')\r\n    const favorite = new Control(this.node, 'input')\r\n    favorite.node.setAttribute('type', 'checkbox')\r\n    favorite.node.id = 'favorite'\r\n    const favoriteLabel = new Control(this.node, 'label')\r\n    favoriteLabel.node.setAttribute('for', 'favorite')\r\n  }\r\n}","import Control from \"../../../common/controll\";\r\nimport './ValueSection.css'\r\nimport { ByColorFilter } from \"./ByColorFilter\"\r\nimport { ByShapeFilter } from \"./ByShapeFilter\"\r\nimport { BySizeFilter } from \"./BySizeFilter\"\r\nimport { Favorite } from './Favorite'\r\nexport class ValueSection extends Control {\r\n  public onChooseColor: (color: string) => void\r\n  public onChooseShape: (shape: string) => void\r\n  public onChooseSize: (size: string) => void;\r\n\r\n  constructor(parentNode: HTMLElement) {\r\n    super(parentNode, 'div', 'valueSection');\r\n    const title = new Control(this.node, 'h5', 'valueSection-title', 'фильтры по значению')\r\n\r\n    const byShape = new ByShapeFilter(this.node)\r\n    byShape.onChooseShape = (shape) => this.onChooseShape(shape)\r\n\r\n    const byColor = new ByColorFilter(this.node)\r\n    byColor.onChooseColor = (color) => this.onChooseColor(color)\r\n\r\n    const bySize = new BySizeFilter(this.node)\r\n    bySize.onChooseSize = (size) => this.onChooseSize(size)\r\n\r\n    const favorite = new Favorite(this.node)\r\n  }\r\n}","import Control from \"../../../common/controll\";\r\nimport './DiaposoneRange.css'\r\n\r\nexport class DiaposoneRange extends Control {\r\n  private inputWidth: number;\r\n  private stepPercent: number;\r\n  private debounce: boolean;\r\n  public finishSpanValue: (value: string) => void\r\n  public startSpanValue: (value: string) => void\r\n  secondThumb: Control<HTMLElement>;\r\n  secondInputWrapper: Control<HTMLElement>;\r\n  firstInputWrapper: Control<HTMLElement>;\r\n\r\n  constructor(parentNode: HTMLElement, values: number[]) {\r\n    super(parentNode, 'div', 'inputWrapper')\r\n    this.inputWidth = 150\r\n    this.stepPercent = 100 / (values[1] - values[0])\r\n    //this.inputWrapper = new Control(parentNode, )\r\n    this.node.style.width = this.inputWidth + \"px\"\r\n    const underLayer = new Control(this.node, 'div', 'underLayer')\r\n    const insideUnderLayer = new Control(this.node, 'div', 'insideDiv')\r\n    this.secondInputWrapper = new Control(this.node, 'div', 'secondInputWrapper')\r\n    const inputSecond: Control<HTMLInputElement> = new Control(this.secondInputWrapper.node, 'input', 'secondInput')\r\n\r\n    this.rangeAttributes(inputSecond.node, values[0], values[1], values[1])\r\n\r\n    this.firstInputWrapper = new Control(this.node, 'div', 'firstInputWrapper')\r\n    const inputFirst: Control<HTMLInputElement> = new Control(this.firstInputWrapper.node, 'input', 'firstInput')\r\n    this.rangeAttributes(inputFirst.node, values[0], values[1], values[0])\r\n\r\n    this.debounce = false\r\n    this.secondThumb = new Control(this.node, 'div', 'secondThrumd')\r\n    this.secondThumb.node.style.left = this.inputWidth - 20 + 'px'\r\n\r\n    this.secondThumb.node.onmouseover = () => {\r\n      // if (!this.debounce) {\r\n      this.secondThumbToggle(true)\r\n      this.debounce = true\r\n      // }\r\n    }\r\n    this.secondThumb.node.onmouseleave = () => {\r\n      this.secondThumbToggle(false)\r\n      this.debounce = true\r\n    }\r\n    this.secondInputWrapper.node.oninput = (e) => {\r\n      this.finishSpanValue((e.target as HTMLInputElement).value);\r\n      const rightMove = (values[1] - +(e.target as HTMLInputElement).value) * this.stepPercent\r\n      this.secondThumb.node.style.left = (this.inputWidth - 20) - (this.inputWidth - 20) * rightMove / 100 + \"px\"\r\n      insideUnderLayer.node.style.right = this.inputWidth * rightMove / 100 + \"px\"\r\n    }\r\n    this.secondInputWrapper.node.onchange = (e) => {\r\n      setTimeout(() => {\r\n        this.debounce = false\r\n      }, 300)\r\n      this.secondThumbToggle(false)\r\n      // this.secondThumb.node.style.left = (this.inputWidth - 20) * (+(e.target as HTMLInputElement).value / 100) + \"px\";\r\n      // (this.secondThumb.node as HTMLInputElement).value = (e.target as HTMLInputElement).value\r\n      inputSecond.node.value = (e.target as HTMLInputElement).value\r\n    }\r\n    this.firstInputWrapper.node.oninput = (e) => {\r\n      this.startSpanValue((e.target as HTMLInputElement).value);\r\n      const leftMove = (this.inputWidth - 20) * ((+(e.target as HTMLInputElement).value - values[0]) * this.stepPercent) / 100 + 'px';\r\n      insideUnderLayer.node.style.left = leftMove\r\n    }\r\n  }\r\n  secondThumbToggle(toggle: boolean) {\r\n    this.secondThumb.node.style.display = toggle ? 'none' : 'block'\r\n    this.secondInputWrapper.node.style.zIndex = toggle ? '5' : '1'\r\n    this.firstInputWrapper.node.style.zIndex = toggle ? '1' : '5'\r\n  }\r\n  rangeAttributes(el: HTMLInputElement, val1: number, val2: number, val3: number) {\r\n    el.type = 'range'\r\n    el.min = '' + val1\r\n    el.max = '' + val2\r\n    el.value = '' + val3\r\n  }\r\n}","import Control from '../../../common/controll'\r\nimport { IDiaposoneProps } from './DiaposoneValue'\r\nimport { DiaposoneRange } from './DiaposonRange'\r\nexport default class DiaposoneElement extends Control {\r\n  onDiaposoneSectionSpanValue:(data:{name:string,direction:string,value:string})=>void\r\n  constructor(parentNode: HTMLElement, data: IDiaposoneProps) {\r\n    super(parentNode)\r\n    const diaposoneTitle = new Control(this.node, 'h6', '', data.titleText)\r\n    const diaposoneContainer = new Control(this.node, 'div', data.containerClass)\r\n    const start = new Control(diaposoneContainer.node, 'span',\r\n      data.startClass, ''+data.values[0])\r\n    const diaposoneRange = new DiaposoneRange(diaposoneContainer.node, data.values)\r\n    const limit = new Control(diaposoneContainer.node, 'span',\r\n      data.limitClass, ''+data.values[1])\r\n      \r\n      diaposoneRange.startSpanValue = (value) => {\r\n        start.node.innerText = value\r\n        this.onDiaposoneSectionSpanValue({\r\n          name: data.valueName,\r\n          direction: 'from',\r\n          value\r\n        })\r\n      }\r\n      diaposoneRange.finishSpanValue = (value) => {\r\n        limit.node.innerText = value\r\n        this.onDiaposoneSectionSpanValue({\r\n          name: data.valueName,\r\n          direction: 'to',\r\n          value\r\n        })\r\n  \r\n      }\r\n  }\r\n}","import Control from '../../../common/controll'\r\nimport { IDiaposoneData } from '../../../interfaces'\r\nimport DiaposoneElement from \"./DiaposoeElement\"\r\nexport interface IDiaposoneProps { \r\n  values: number[]; \r\n  titleText: string; \r\n  containerClass: string; \r\n  startClass: string; \r\n  limitClass: string; \r\n  valueName:string\r\n}\r\nexport default class DiaposoneValue extends Control {\r\n  onDiaposoneSectionSpanValue: (data: IDiaposoneData) => void\r\n  constructor(parentNode: HTMLElement) {\r\n    super(parentNode, 'div', 'decorationCount')\r\n    const countData:IDiaposoneProps = {\r\n      values: [1, 12],\r\n      titleText: 'количество экземпляров',\r\n      containerClass: 'diaposoneCountContainer',\r\n      startClass: 'decorationCount-startValue',\r\n      limitClass: 'decorationCount-limitValue',\r\n      valueName:'count'\r\n    }\r\n    const countDiaposone = new DiaposoneElement(this.node,countData)\r\n   countDiaposone.onDiaposoneSectionSpanValue=(data)=>{\r\n     this.onDiaposoneSectionSpanValue(data)\r\n   }\r\n  }\r\n}","import Control from '../../../common/controll'\r\nimport { IDiaposoneData } from '../../../interfaces';\r\nimport DiaposoneElement from './DiaposoeElement';\r\nimport { IDiaposoneProps } from './DiaposoneValue';\r\nimport { DiaposoneRange } from './DiaposonRange'\r\n\r\nexport default class DiaposoneYear extends Control{\r\n  onDiaposoneSectionSpanValue:(data:IDiaposoneData)=>void\r\n\r\n  constructor(parentNode:HTMLElement){\r\n    super(parentNode,'div', 'decorationYear')\r\n    const yearData:IDiaposoneProps = {\r\n      values: [1940, 2020],\r\n      titleText: 'Год покупки',\r\n      containerClass: 'diaposoneYearContainer',\r\n      startClass: 'decorationYear-startValue',\r\n      limitClass: 'decorationYear-limitValue',\r\n      valueName:'year',\r\n    }\r\n    const yearDiaposone = new DiaposoneElement(this.node,yearData)\r\n   yearDiaposone.onDiaposoneSectionSpanValue=(data)=>{\r\n     this.onDiaposoneSectionSpanValue(data)\r\n   }    \r\n  }\r\n}","import Control from \"../../../common/controll\";\r\nimport { DiaposoneRange } from \"./DiaposonRange\";\r\nimport { IDiaposoneData } from \"../../../interfaces\";\r\nimport DiaposoneValue from './DiaposoneValue'\r\nimport DiaposoneYear from './DiaposoneYear'\r\n\r\nexport class DiaposoneSection extends Control {\r\n  private title: Control<HTMLElement>;\r\n  public diaposoneSectionSpanValue: (data: IDiaposoneData) => void\r\n \r\n  constructor(parentNode: HTMLElement) {\r\n    super(parentNode, 'div', 'diaposoneSection');\r\n\r\n    this.title = new Control(this.node, 'h5', 'diaposoneSection-title',\r\n      'фильтры по диапазону')\r\n    const diaposoneValue = new DiaposoneValue(this.node)\r\n    diaposoneValue.onDiaposoneSectionSpanValue = (data) => { \r\n      this.diaposoneSectionSpanValue(data)\r\n    }\r\n    const diaposoneYear = new DiaposoneYear(this.node)\r\n    diaposoneYear.onDiaposoneSectionSpanValue = (data) => {\r\n      this.diaposoneSectionSpanValue(data)\r\n    }\r\n  }\r\n}","import Control from \"../../../common/controll\";\r\n\r\nexport class OptionElement extends Control{\r\n  private optionElement: Control<HTMLOptionElement>;\r\n  constructor(parentNode:HTMLElement,title:string,value:string) {\r\n    super(parentNode);\r\n    this.optionElement = new Control(parentNode, 'option','', title);\r\n    this.optionElement.node.value = value\r\n  }\r\n}","import Control from \"../../../common/controll\";\r\nimport {OptionElement} from \"./OptionElement\";\r\nimport './SortSection.css'\r\n\r\nexport class SortSection extends Control {\r\n  private sortSection: Control<HTMLElement>;\r\n  private title: Control<HTMLElement>;\r\n  private cancelFilters: Control<HTMLElement>;\r\n  private form: Control<HTMLElement>;\r\n  private select: Control<HTMLSelectElement>;\r\n  public sortOrder: (order: string) => void\r\n  private optionsValues: Record<string, string>[];\r\n\r\n  constructor(parentNode: HTMLElement) {\r\n    super(parentNode,'div', 'sortSection');\r\n    this.title = new Control(this.node, 'h5', 'sortSection-title', 'сортирока')\r\n    this.form = new Control(this.node, 'form', '')\r\n    this.select = new Control(this.form.node, 'select')\r\n    this.select.node.onchange = (e) => {\r\n      console.log(this.select.node.value)\r\n      this.sortOrder(this.select.node.value)\r\n    }\r\n    this.optionsValues = [\r\n      {\r\n        value: 'alphabet-direct',\r\n        title: 'Сортировка от А до Я'\r\n      },\r\n      {\r\n        value: 'alphabet-reverse',\r\n        title: 'Сортировка от Я до А'\r\n      },\r\n      {\r\n        value: 'count-direct',\r\n        title: 'Сортировка по количеству(по возрастанию)'\r\n      },\r\n      {\r\n        value: 'count-reverse',\r\n        title: 'Сортировка по количеству(по убыванию)'\r\n      }\r\n    ]\r\n\r\n    this.optionsValues.forEach(_option => {\r\n      const option = new OptionElement(this.select.node, _option.title, _option.value)\r\n    })\r\n\r\n    this.cancelFilters = new Control(this.form.node, 'button', '', 'Сбросить фильтры')\r\n  }\r\n}","import './FiltersContainer.css'\r\nimport Control from \"../../common/controll\";\r\nimport { ValueSection } from \"./ValueSecton/ValueSection\";\r\nimport { DiaposoneSection } from \"./DiaposoneSection/DianosoneSection\";\r\nimport { SortSection } from \"./SortSection/SortSection\";\r\nimport { IDiaposoneData } from \"../../interfaces\";\r\n\r\nexport class FilterContainer extends Control {\r\n  public onChooseColor: (color: string) => void\r\n  public onChooseShape: (shape: string) => void;\r\n  public onChooseSize: (size: string) => void\r\n  public setDiaposoneData: (data: IDiaposoneData) => void\r\n  public setSortOrder: (order: string) => void\r\n\r\n  constructor(parentNode: HTMLElement) {\r\n    super(parentNode,'div', 'filtersContainer');\r\n    const valueSection = new ValueSection(this.node)\r\n    valueSection.onChooseColor = (color) => {\r\n      this.onChooseColor(color)\r\n    }\r\n    valueSection.onChooseShape = (shape) => {\r\n      this.onChooseShape(shape)\r\n    }\r\n    valueSection.onChooseSize = (size: string) => {\r\n      this.onChooseSize(size)\r\n    }\r\n    const byDaiposoneSection = new DiaposoneSection(this.node)\r\n    byDaiposoneSection.diaposoneSectionSpanValue = (data) => {\r\n      this.setDiaposoneData(data)\r\n    }\r\n    const bySortSection = new SortSection(this.node)\r\n    bySortSection.sortOrder = (order) => {\r\n      this.setSortOrder(order)\r\n    }\r\n  }\r\n}","import Control from \"../../../common/controll\";\r\nimport {IToyData} from \"../../../interfaces\";\r\nimport './ToyItem.css'\r\nexport class ToyItem extends Control {\r\n  public addFavorite:(toyData:IToyData)=>void\r\n  constructor(parentNode: HTMLElement, toyData: IToyData) {\r\n    super(parentNode,'div', 'toyCell');\r\n    const title = new Control(this.node, 'h5', '', toyData.name)\r\n    const dataContainer = new Control(this.node, 'div', 'toyCellData')\r\n    const img: Control<HTMLImageElement> = new Control(dataContainer.node, 'img')\r\n    img.node.src = `./public/assets/toys/${+toyData.num + ''}.png`\r\n    const dataContent = new Control(dataContainer.node, 'div', 'toyCellContent')\r\n    const count = new Control(dataContent.node, 'span', '', `Количество: ${toyData.count}`)\r\n    const year = new Control(dataContent.node, 'span', '', `Год: ${toyData.year}`)\r\n    const shape = new Control(dataContent.node, 'span', '', `Форма: ${toyData.shape}`)\r\n    const color = new Control(dataContent.node, 'span', '', `Цвет: ${toyData.color}`)\r\n    const size = new Control(dataContent.node, 'span', '', `Цвет: ${toyData.size}`)\r\n    const favorite = new Control(dataContent.node, 'span', '', `Любимая: ${!toyData.favorite ? 'нет' : 'да'}`)\r\n    const selectFavorite = new Control(dataContent.node, 'button', '', 'Добавить к любимым')\r\n    selectFavorite.node.onclick=()=>{\r\n      this.addFavorite(toyData)\r\n    }\r\n  }\r\n}","import Control from \"../../common/controll\";\r\nimport './DecorationSection.css'\r\nimport { IToyData } from \"../../interfaces\";\r\nimport { ToyItem } from \"./ToyItem/ToyItem\";\r\nimport { toyItemData } from \"../../index\";\r\n\r\nexport class DecorationSection extends Control {\r\n  public addFavorite: (toyData: IToyData) => void\r\n  constructor(parentNode: HTMLElement, toyData: toyItemData[]) {\r\n    super(parentNode, 'div', 'decorationSection');\r\n    this.drawSection(toyData)\r\n  }\r\n\r\n  public drawSection(toyData: IToyData[]) {\r\n    this.node.innerHTML = ''\r\n    toyData.forEach(d => {\r\n      const toy = new ToyItem(this.node, d)\r\n      toy.addFavorite = (toyData) => {\r\n        this.addFavorite(toyData)\r\n      }\r\n    })\r\n  }\r\n\r\n}","import Control from \"../common/controll\";\r\nimport './SettingsPage.css'\r\nimport {FilterContainer} from \"./filters/FilterContainer\";\r\nimport {DecorationSection} from \"./decoration/DecorationSection\";\r\nimport {FiltersModel} from \"./filters/FiltersModel\";\r\nimport {IToyData} from \"../interfaces\";\r\nimport { toyItemData } from \"../index\";\r\n\r\nexport class SettingsPage extends Control {\r\n  private filtersContainer: FilterContainer;\r\n  private decorationSection: DecorationSection;\r\n  private filtersModel: FiltersModel;\r\n  public addFavorite: (toyData: IToyData) => void\r\n\r\n  constructor(parentNode: HTMLElement, filtersModel: FiltersModel,toysData: toyItemData[]) {\r\n    super(parentNode,'div', 'settingsPage');\r\n    parentNode.style.backgroundImage=\"url('./src/assets/bgSettings.png')\"\r\n    this.filtersModel = filtersModel\r\n    this.filtersModel.onRedrawToys = (toysArray) => {\r\n      \r\n      this.decorationSection.drawSection(toysArray)\r\n    }\r\n    this.filtersContainer = new FilterContainer(this.node)\r\n\r\n    this.filtersContainer.onChooseColor = (color) => {\r\n      this.filtersModel.setOneFilter('color', color)\r\n    }\r\n    this.filtersContainer.onChooseShape = (shape) => {\r\n      this.filtersModel.setOneFilter('shape', shape)\r\n    }\r\n    this.filtersContainer.onChooseSize = (size) => {\r\n      this.filtersModel.setOneFilter('size', size)\r\n    }\r\n    this.filtersContainer.setDiaposoneData = (data) => {\r\n       this.filtersModel.setDiaposon(data)\r\n    }\r\n    this.filtersContainer.setSortOrder = (order) => {\r\n      this.filtersModel.setSortOrder(order)\r\n    }\r\n    this.decorationSection = new DecorationSection(this.node,toysData)\r\n    this.decorationSection.addFavorite = (toyData) => {\r\n     this.addFavorite(toyData)\r\n    }\r\n  }\r\n}","import Control from \"../../common/controll\";\r\n\r\nexport class ChooseSection extends Control {\r\n  private chooseContainer: Control<HTMLElement>;\r\n  private chooseBackground: Control<HTMLElement>;\r\n  private chooseTree: Control<HTMLElement>;\r\n  private chooseGirland: Control<HTMLElement>;\r\n  private bgImages: string[];\r\n  private bgItems: Control<HTMLElement>;\r\n  private treeImages: string[];\r\n  private treeImgs: Control<HTMLElement>;\r\n  private treeItems: any;\r\n  private girlandColors: string[];\r\n  public setCanvasBackground: (bgImageIndex: string) => void;\r\n  private colorsList: Control<HTMLElement>;\r\n  private chooseBackgroundButton: Control<HTMLButtonElement>;\r\n  private treeImgsButton: Control<HTMLElement>;\r\n  private girlandButton: Control<HTMLElement>;\r\npublic setCanvasTree:(tr:string)=>void\r\n  constructor(parentNode: HTMLElement) {\r\n    super(parentNode);\r\n    this.bgImages = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\r\n    this.treeImages = ['1', '2', '3', '4', '5', '6']\r\n    this.girlandColors = ['red', 'green', 'blue']\r\n    this.node.classList.add('chooseContainer')\r\n    this.chooseBackground = new Control(this.node, 'div', 'chooseBackground')\r\n    this.chooseBackgroundButton = new Control(this.chooseBackground.node, 'button',\r\n      'chooseBackgroundButton', 'Выбери фон')\r\n    this.chooseBackgroundButton.node.onclick = () => {\r\n      this.bgItems.node.style.display = 'grid'\r\n      setTimeout(() => {\r\n        this.bgItems.node.classList.toggle('bgItemsWrapper-show')\r\n      }, 0)\r\n    }\r\n    this.bgItems = new Control(this.chooseBackground.node, 'div', 'bgItemsWrapper-hide',)\r\n    this.bgImages.forEach(bg => {\r\n      const bgItem = new Control(this.bgItems.node, 'div', 'bgItem')\r\n      bgItem.node.style.backgroundImage = `url(./public/assets/bg/${bg}.jpg)`\r\n      bgItem.node.onclick = () => {\r\n        this.bgItems.node.classList.remove('bgItemsWrapper-show')\r\n        this.setCanvasBackground(bg)\r\n        setTimeout(()=>{\r\n          this.bgItems.node.style.display='none'\r\n        },0)\r\n      }\r\n    })\r\n\r\n    this.chooseTree = new Control(this.node, 'div', 'chooseTree')\r\n    this.treeImgs = new Control(this.chooseTree.node, 'div', 'treeImages-hide')\r\n    this.treeImgsButton = new Control(this.chooseTree.node, 'button',\r\n      'chooseTreeButton', 'Выбери елку')\r\n    this.treeImgsButton.node.onclick = () => {\r\n\r\n      this.treeImgs.node.style.display = 'grid'\r\n      setTimeout(() => {\r\n        this.treeImgs.node.classList.toggle('treeImages-show')\r\n      }, 0)\r\n    }\r\n    this.treeImages.forEach((tr: string) => {\r\n      const treeItem = new Control(this.treeImgs.node, 'div', 'treeItem')\r\n      treeItem.node.style.backgroundImage = `url(./public/assets/tree/${tr}.png)`\r\n      treeItem.node.onclick = () => {\r\n        this.setCanvasTree(tr)\r\n        this.treeImgs.node.classList.remove('treeImages-show')\r\n      }\r\n    })\r\n\r\n\r\n    this.chooseGirland = new Control(this.node, 'div', 'chooseGirland', 'girland')\r\n    this.girlandButton = new Control(this.chooseGirland.node, 'button',\r\n      'chooseGirlandButton', 'Включить гирлянду')\r\n    this.girlandButton.node.onclick = () => {\r\n      this.colorsList.node.style.display = 'flex'\r\n      setTimeout(() => {this.colorsList.node.classList.toggle('girland-show')}, 0)\r\n    }\r\n    this.colorsList = new Control(this.chooseGirland.node, 'ul', 'girland-hide')\r\n    this.girlandColors.forEach(col => {\r\n      const color = new Control(this.colorsList.node, 'li', 'colorItem')\r\n      color.node.style.background = col\r\n      color.node.onclick = () => {\r\n        this.colorsList.node.classList.remove('girland-show')\r\n      }\r\n    })\r\n\r\n\r\n  }\r\n}","import Control from \"../common/controll\";\r\nimport {IToyOnTree} from \"../interfaces\";\r\n\r\nexport class ToyImage extends Control {\r\n  public startX: number;\r\n  public startY: number;\r\n  private size: number;\r\n  public index: number;\r\n  private toyImage: HTMLImageElement;\r\n  public id: number;\r\n\r\n  constructor(parentNode: HTMLElement, toyData: IToyOnTree) {\r\n    super(parentNode)\r\n    this.startX = toyData.x,\r\n      this.startY = toyData.y,\r\n      this.size = toyData.size,\r\n      this.index = toyData.num\r\n    this.toyImage = new Image()\r\n    this.id=+new Date()\r\n    this.toyImage.src = `./public/assets/toys/${this.index}.png`\r\n  }\r\n\r\n  render(context: CanvasRenderingContext2D) {\r\n    context.globalCompositeOperation = 'source-over'\r\n    context.drawImage(this.toyImage, this.startX, this.startY,\r\n      this.size, this.size);\r\n\r\n  }\r\n}","import Control from \"../../common/controll\";\r\n\r\nexport class MaskCanvas extends Control {\r\n  private secondCanvas: Control<HTMLCanvasElement>;\r\n  private isEmptyMap: Map<string, boolean>;\r\n  private coordsForGarland: { y: number; x: number[] }[];\r\n\r\n  constructor(parentNode: HTMLElement, image: HTMLImageElement, width: number, height: number) {\r\n    super(parentNode)\r\n    this.secondCanvas = new Control(parentNode, 'canvas')\r\n    this.secondCanvas.node.width = width,\r\n      this.secondCanvas.node.height = height\r\n    const secondCtx = this.secondCanvas.node.getContext('2d')\r\n    secondCtx.drawImage(image, 0, 0, width, height)\r\n    const data = secondCtx.getImageData(0, 0, width, height)\r\n    this.isEmptyMap = new Map()\r\n    let countX = 0\r\n    let countY = 0\r\n    //значения границ по строкам\r\n    const limitValues: { y: number, x: number[] }[] = []\r\n    let rowObject: { y: number, x: number[] } = {y: countY, x: []}\r\n    let firstInRow: boolean = false\r\n    let lastInRow: number = null\r\n    for (let i = 0; i < data.data.length; i += 4) {\r\n      if (countX === Math.floor(width)) {\r\n        rowObject.x.push(lastInRow)\r\n        limitValues.push(rowObject)\r\n        countX = 0\r\n        countY++\r\n        firstInRow = false\r\n        lastInRow = null\r\n        rowObject = {y: countY, x: []}\r\n      }\r\n      countX++\r\n      if (!(data.data[i + 3] == 0)) {\r\n        this.isEmptyMap.set(`${countX}-${countY}`, true)\r\n        if (!firstInRow) {\r\n          firstInRow = true\r\n          rowObject.x.push(countX)\r\n        }\r\n        else {\r\n          lastInRow = countX\r\n        }\r\n      }\r\n      // if (data.data[i + 3] < 10) {\r\n      //   this.isEmptyMap.set(`${countX}-${countY}`, false)\r\n      // }\r\n      // else {\r\n      //    this.isEmptyMap.set(`${countX}-${countY}`, true)\r\n      // }\r\n\r\n    }\r\n    this.coordsForGarland = this.setLimitsForGarland(limitValues)\r\n    this.secondCanvas.destroy()\r\n  }\r\n\r\n  getGarlandCoords() {\r\n    return this.coordsForGarland\r\n  }\r\n\r\n  setLimitsForGarland(limitValues: { y: number, x: number[] }[]) {\r\n    const limitsForGarland = []\r\n    for (let i = 0; i < limitValues.length; i += 50) {\r\n      limitsForGarland.push(limitValues[i])\r\n    }\r\n    return limitsForGarland\r\n  }\r\n\r\n  checkPixel(x: number, y: number) {\r\n    return this.isEmptyMap.get(`${Math.floor(x)}-${Math.floor(y)}`)\r\n  }\r\n\r\n  public getCursorPosition(event: MouseEvent, node: HTMLElement) {\r\n    const rect = node.getBoundingClientRect()\r\n    const x = event.clientX - rect.left\r\n    const y = event.clientY - rect.top\r\n    return {x, y}\r\n  }\r\n\r\n  pick(e: MouseEvent, node: HTMLElement, context: CanvasRenderingContext2D): { x: number, y: number } {\r\n    const {x, y} = this.getCursorPosition(e, node)\r\n    return {x, y}\r\n  }\r\n}","export class Dot {\r\n  private x: number;\r\n  private y: number;\r\n  private size: number;\r\n  private ctx: CanvasRenderingContext2D;\r\n  private speedY: number;\r\n  private speedX: number;\r\n  private maxSize: number;\r\n  private angle: number;\r\n  private vs: number;\r\n  private va: number;\r\n  private angleX: number;\r\n  private angleY: number;\r\n  private vax: number;\r\n  private vay: number;\r\n  private lightness: number;\r\n  public onChangeDot:(canvas:HTMLCanvasElement)=>void\r\n\r\n  constructor(ctx: CanvasRenderingContext2D, x: number, y: number) {\r\n    this.x = x\r\n    this.y = y\r\n    this.ctx = ctx\r\n\r\n    this.size = Math.random() * 1 + 2\r\n    this.speedY = Math.random() * 4\r\n    this.speedX = Math.random() * 4 - 2\r\n    this.maxSize = Math.random() * 2 + 3\r\n    this.size = Math.random() * 1 + 1\r\n    this.vs = Math.random() * 0.2 + 0.55\r\n    this.angleX = Math.random()*6.2\r\n    this.angleY = Math.random() * 6.2\r\n    this.vax = Math.random() * 0.6 - 0.3\r\n    this.vay = Math.random() * 0.6 - 0.3\r\n    this.lightness = 10\r\n    this.ctx.fillStyle = `rgba(${Math.random()*100+150},${Math.random()*100+150},${Math.random()*100+150},0.65)`\r\n\r\n    this.angle = 0\r\n    this.ctx.shadowOffsetX = 0\r\n    this.ctx.shadowOffsetY = 5\r\n    this.ctx.shadowBlur = 5\r\n    this.ctx.shadowColor = 'rgba(15,18,31,0.72)'\r\n\r\n  }\r\n\r\n  update(x: number, y: number) {\r\n\r\n    this.x += this.speedX + Math.sin(this.angleX)\r\n    this.y += this.speedY + Math.sin(this.angleY)\r\n    this.size += this.vs\r\n    this.angleX += this.vax\r\n    this.angleY += this.vay\r\n    this.angle += this.va\r\n    //this.ctx.globalCompositeOperation = 'destination-in'\r\n\r\n    if (this.size < this.maxSize+2) {\r\n     // this.ctx.globalCompositeOperation = 'destination-in'\r\n      this.ctx.save()\r\n     // this.ctx.globalCompositeOperation = 'destination-in'\r\n      this.ctx.translate(this.x, this.y)\r\n      this.ctx.rotate(this.angle)\r\n      this.ctx.fillRect(0 - this.size / 2, 0 - this.size / 2, this.size, this.size)\r\n      let double = this.size * 2\r\n      this.ctx.lineWidth = 0.5\r\n      this.ctx.strokeStyle = `rgba(255,0,${Math.random()*50},1)`\r\n      //this.ctx.globalCompositeOperation = 'source-over'\r\n     // this.ctx.strokeRect(0 - double / 2, 0 - double / 2, double, double)\r\n      this.ctx.strokeRect(0 - this.size, 0 - this.size, this.size, this.size)\r\n      let triple = this.size * 3\r\n      this.ctx.lineWidth = 0.2\r\n       this.ctx.strokeStyle = 'white'\r\n    // this.ctx.strokeRect(0 - triple / 2, 0 - triple / 2, triple, triple)\r\n      this.ctx.strokeRect(0 - this.size, 0 - this.size, this.size, this.size)\r\n      requestAnimationFrame(this.update.bind(this))\r\n      this.ctx.restore()\r\n      // this.onChangeDot(this.ctx.canvas)\r\n    }\r\n  }\r\n}","import {Dot} from \"./Dot\";\r\n\r\nexport class CreateGarland {\r\n  public garlandCoordinates: { y: number, x: number[] }[]\r\n  public newCtx: CanvasRenderingContext2D;\r\n  public newCanvas: HTMLCanvasElement;\r\n  private currentStep: number;\r\n  private x: number;\r\n  private y: number;\r\n  private c: number;\r\n\r\n  constructor(width:number,height:number) {\r\n    this.newCanvas = document.createElement('canvas')\r\n    this.newCanvas.width = width\r\n    this.newCanvas.height = height\r\n    console.log('top',this.newCanvas.width,this.newCanvas.height)\r\n    this.newCtx = this.newCanvas.getContext('2d')\r\n    this.newCtx.globalCompositeOperation='destination-over'\r\n  //  this.newCtx.fillStyle = 'rgba(217,217,38,0.97)'\r\n //  this.newCtx.fillRect(0, 0, this.newCanvas.width, this.newCanvas.height)\r\n  }\r\n  draw(){\r\n    for (let i = 1; i <this.garlandCoordinates.length-1; i++) {\r\n     if (!this.garlandCoordinates[i + 1]) return;\r\n      let startX = this.garlandCoordinates[i].x[0]\r\n      let startY = this.garlandCoordinates[i].y\r\n     // new Dot(this.newCtx,startX,startY).update(startX,startY)\r\n      const xDistance = this.garlandCoordinates[i + 1].x[1] - this.garlandCoordinates[i].x[0]\r\n      const steps = Math.ceil(xDistance / 50)\r\n      const xStep = xDistance / steps\r\n      let currentStep = 1\r\n\r\n      const updateCoords=()=>{\r\n        if(currentStep<steps/2){\r\n          startX+=xStep\r\n          startY+=10\r\n        }else if(currentStep>=steps/2 && currentStep<steps/2+4 ){\r\n          startX+=xStep\r\n        }else{\r\n          startX+=xStep\r\n          startY-=8\r\n        }\r\n\r\n      for(let i=0;i<7;i++){\r\n        new Dot(this.newCtx,startX,startY).update(startX,startY)\r\n      }\r\n        currentStep++\r\n      }\r\n      const intervalFunction = () => {\r\n         updateCoords();\r\n        if (currentStep == steps) {\r\n          clearInterval(inter)\r\n        }\r\n      }\r\n\r\n      const inter = setInterval(intervalFunction, 50)\r\n    }\r\n  }\r\n  setCoords(data: { y: number; x: number[] }[]) {\r\n    this.garlandCoordinates = data\r\n    this.draw()\r\n  }\r\n}","import Control from \"../../common/controll\";\r\nimport { ICanvasImageObject, IToyData } from \"../../interfaces\";\r\nimport { ToyImage } from \"../ToyImage\";\r\nimport { MaskCanvas } from \"./MaskCanvas\";\r\nimport { CreateGarland } from \"./createGirland\";\r\nimport { canvasS, canvTree } from \"../../garlandCanvas\";\r\n\r\n\r\nexport class CanvasSection extends Control {\r\n  private canvasSection: Control<HTMLCanvasElement>;\r\n  private ctx: CanvasRenderingContext2D;\r\n  private canvasBackground: ICanvasImageObject;\r\n  private canvasTree: ICanvasImageObject;\r\n  toysOnTree: ToyImage[]\r\n  private prevPosX: number;\r\n  private prevPosY: number;\r\n  private mouseDownHandlerBinded: () => void;\r\n  private moveHandlerBinded: () => void;\r\n  private parentNode: HTMLElement;\r\n  private maskCanvas: MaskCanvas;\r\n  private canvasWidth: number;\r\n  private canvasHeight: number;\r\n  private offsetTreeCanvasWidth: number;\r\n  private offsetTreeCanvasHeight: number;\r\n  private createGarland: CreateGarland;\r\n  public garlandCoordinates: { y: number; x: number[] }[];\r\n\r\n  constructor(parentNode: HTMLElement) {\r\n    super(parentNode);\r\n    this.parentNode = parentNode\r\n    this.toysOnTree = []\r\n    this.node.classList.add('canvasSection')\r\n    this.canvasSection = new Control(this.node, 'canvas', 'canvas')\r\n    this.canvasSection.node.width = this.canvasWidth = this.canvasSection.node.getBoundingClientRect().width\r\n    this.canvasSection.node.height = this.canvasHeight = this.canvasSection.node.getBoundingClientRect().height\r\n    this.canvasSection.node.onclick = (e) => {\r\n      console.log(e.offsetX, e.offsetY)\r\n    }\r\n    this.prevPosX\r\n    this.prevPosX\r\n    this.mouseDownHandlerBinded = this.mouseDownHandler.bind(this)\r\n    this.moveHandlerBinded = this.moveHandler.bind(this)\r\n    this.setCanvasBackground('1')\r\n    this.setCanvasTree('1')\r\n    this.offsetTreeCanvasWidth = this.canvasWidth * 0.2 / 2\r\n    this.offsetTreeCanvasHeight = this.canvasHeight * 0.2 / 2\r\n    this.canvasSection.node.addEventListener('mousedown', this.mouseDownHandlerBinded)\r\n    this.ctx = this.canvasSection.node.getContext('2d')\r\n    this.canvasBackground = null\r\n    this.canvasTree = null\r\n    this.maskCanvas = null\r\n    this.createGarland = new CreateGarland(this.canvasSection.node.width, this.canvasSection.node.height)\r\n    this.node.ondragover = (e) => {\r\n      e.preventDefault()\r\n    }\r\n    this.node.ondrop = (e) => {\r\n      const { x, y } = this.getCursorPosition(e, this.node)\r\n      if (!this.isOverCanvas(x - this.canvasTree.startX, y - this.canvasTree.startY)) return\r\n      else {\r\n        if (this.maskCanvas.checkPixel(x - this.canvasTree.startX, y - this.canvasTree.startY)) {\r\n          const toy = new ToyImage(this.node, {\r\n            x: x - 25, y: y - 25,\r\n            num: +e.dataTransfer.getData('el'), size: 50\r\n          })\r\n          toy.render(this.ctx)\r\n          this.toysOnTree.push(toy)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  mouseDownHandler(e: MouseEvent) {\r\n    this.prevPosX = this.getCursorPosition(e, this.node).x\r\n    this.prevPosY = this.getCursorPosition(e, this.node).y\r\n    this.canvasSection.node.addEventListener('mousemove', this.moveHandlerBinded)\r\n  }\r\n\r\n  moveHandler(e: MouseEvent) {\r\n    const currentToy: ToyImage = this.getCurrentToy(e)\r\n    const { x, y } = this.getCursorPosition(e, this.node)\r\n    currentToy && (currentToy.startX = currentToy.startX + x - this.prevPosX);\r\n    currentToy && (currentToy.startY = currentToy.startY + y - this.prevPosY);\r\n    this.prevPosX = x\r\n    this.prevPosY = y\r\n    this.drawScene()\r\n    this.canvasSection.node.onmouseup = (e) => {\r\n      const { x, y } = this.getCursorPosition(e, this.canvasSection.node)\r\n      if (this.isOverCanvas(x - 50, y - 50)) {\r\n        const canvasX = x - this.canvasTree.startX\r\n        const canvasY = y - this.canvasTree.startY\r\n        if (!this.maskCanvas.checkPixel(canvasX, canvasY)) {\r\n          this.deleteToy(this.getCurrentToy(e))\r\n          //TODO даляются все одинаковые элементы\r\n          //попадают элнменты в диапозоне\r\n        }\r\n      }\r\n      this.canvasSection.node.removeEventListener('mousemove', this.moveHandlerBinded)\r\n    }\r\n  }\r\n\r\n  isOverCanvas(x: number, y: number) {\r\n    // console.log(this.canvasTree.startX,this.canvasTree.startX + this.canvasTree.width,'^',this.canvasTree.startY,this.canvasTree.startY + this.canvasTree.height)\r\n    // console.log(x,y)\r\n    return (x >= this.canvasTree.startX\r\n      && x <= this.canvasTree.startX + this.canvasTree.width\r\n      || y >= this.canvasTree.startY\r\n      || y <= this.canvasTree.startY + this.canvasTree.height)\r\n  }\r\n\r\n  smallFoo() {\r\n    const garCanvas = this.createGarland.newCanvas\r\n    this.ctx.clearRect(0, 0, garCanvas.width, garCanvas.height)\r\n    this.drawBackground()\r\n    this.drawTree()\r\n    this.ctx.drawImage(garCanvas, 0, 0)\r\n\r\n    requestAnimationFrame(() => {\r\n      this.drawBackground()\r\n      this.drawTree()\r\n      this.smallFoo()\r\n      this.toysOnTree.forEach(toy => {\r\n        toy.render(this.ctx)\r\n      })\r\n    })\r\n  }\r\n\r\n  drawScene() {\r\n    this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight)\r\n    this.smallFoo()\r\n  }\r\n\r\n  deleteToy(delToy: ToyImage) {\r\n    this.toysOnTree = this.toysOnTree.filter(toy => toy.id !== delToy.id)\r\n    this.drawScene()\r\n  }\r\n\r\n  getCurrentToy(e: MouseEvent): ToyImage {\r\n    const { x, y } = this.getCursorPosition(e, this.node)\r\n    const toy = this.toysOnTree.filter(toy => {\r\n      if (x > toy.startX && x < toy.startX + 50\r\n        && y > toy.startY && y < toy.startY + 50) {\r\n        return true\r\n      }\r\n      else {\r\n        return false\r\n      }\r\n    })\r\n    return toy[toy.length - 1]\r\n  }\r\n\r\n  public getCursorPosition(event: MouseEvent, node: HTMLElement) {\r\n    const rect = node.getBoundingClientRect()\r\n    const x = event.clientX - rect.left\r\n    const y = event.clientY - rect.top\r\n    return { x, y }\r\n  }\r\n\r\n  public setCanvasBackground(bgImageIndex: string) {\r\n    this.createImage(`./public/assets/bg/${bgImageIndex}.jpg`,\r\n      this.canvasWidth, this.canvasHeight, this.bgOnload)\r\n  };\r\n\r\n  public setCanvasTree(treeImageIndex: string) {\r\n    this.createImage(`./public/assets/tree/${treeImageIndex}.png`,\r\n      this.canvasWidth * 0.7, this.canvasHeight * 0.7, this.treeOnload)\r\n  }\r\n  createImage(url: string, width: number, height: number, callcack: (img: HTMLImageElement) => void) {\r\n    const image = new Image()\r\n    image.src = url\r\n    image.width = width\r\n    image.height = height\r\n    image.onload = () => {\r\n      callcack(image)\r\n    }\r\n  }\r\n  bgOnload(canvasImage: HTMLImageElement) {\r\n    this.canvasBackground = {\r\n      image: canvasImage,\r\n      startX: 0,\r\n      startY: 0,\r\n      width: this.canvasWidth,\r\n      height: this.canvasHeight,\r\n    }\r\n  }\r\n  treeOnload(treeImage: HTMLImageElement) {\r\n    this.maskCanvas = new MaskCanvas(this.node, treeImage, this.canvasWidth * 0.7, this.canvasHeight * 0.7)\r\n    const arr = this.maskCanvas.getGarlandCoords()\r\n    const newCoords = arr.map((el) => {\r\n      el.y = el.y + Math.floor(this.offsetTreeCanvasHeight)\r\n      el.x[0] = el.x[0] + Math.floor(this.offsetTreeCanvasWidth)\r\n      el.x[1] = el.x[1] + Math.floor(this.offsetTreeCanvasWidth)\r\n      return el\r\n    })\r\n    this.createGarland.setCoords(newCoords)\r\n    this.canvasTree = {\r\n      startX: this.canvasWidth * 0.2 / 2, startY: this.canvasHeight * 0.2 / 2, image: treeImage,\r\n      width: this.canvasWidth * 0.8, height: this.canvasHeight * 0.8\r\n    }\r\n    this.drawScene()\r\n  }\r\n  drawBackground() {\r\n    this.canvasBackground.image\r\n      && this.ctx.drawImage(this.canvasBackground.image, 0, 0,\r\n        this.canvasBackground.width, this.canvasBackground.height)\r\n  }\r\n\r\n  drawTree() {\r\n    this.ctx.globalCompositeOperation = 'source-over'\r\n    this.canvasTree && this.ctx.drawImage(this.canvasTree.image, this.canvasTree.startX, this.canvasTree.startY,\r\n      this.canvasTree.width, this.canvasTree.height)\r\n  }\r\n}\r\n\r\n","import Control from \"../../common/controll\";\r\nimport {FiltersModel} from \"../../settingsPage/filters/FiltersModel\";\r\n\r\nexport class ToysSection extends Control {\r\n  private toysSection: Control<HTMLElement>;\r\n\r\n  constructor(parentNode: HTMLElement, filtersModel: FiltersModel) {\r\n    super(parentNode);\r\n    this.node.classList.add('toysSection')\r\n//    filtersModel.getFavorites().forEach(toy => {\r\n //     const toyItem = new Control(this.node, 'div', 'toySectionItem')\r\n   //  toyItem.node.style.backgroundImage = `url(./public/assets/toys/${toy.num}.png)`\r\n //     const image=new Image()\r\n //     image.src=`./public/assets/toys/${toy.num}.png`;\r\n //     image.style.width='60%'\r\n //     image.style.height='60%'\r\n //     image.draggable=true\r\n //     image.ondragstart=(e)=>{\r\n //       e.dataTransfer.setData('el',toy.num)\r\n       // console.log(\"JUYJUJUYJ\",e.dataTransfer)\r\n //     }\r\n  //    toyItem.node.appendChild(image)\r\n  //    const toyCount = new Control(toyItem.node, 'span', 'toyCount', toy.count)\r\n  //  })\r\n  }\r\n}","import Control from \"../common/controll\";\r\nimport {FiltersModel} from \"../settingsPage/filters/FiltersModel\";\r\nimport {ChooseSection} from \"./chooseSection/chooseSection\";\r\nimport {CanvasSection} from \"./canvasSection/canvasSection\";\r\nimport {ToysSection} from \"./toysSection/toysSection\";\r\nimport './Tree.css'\r\nexport class TreePage extends Control {\r\n  private canvasSection: CanvasSection;\r\n  private toysSection: ToysSection;\r\n  private chooseSection: ChooseSection;\r\n  constructor(parentNode: HTMLElement, filtersModel: FiltersModel) {\r\n    super(parentNode,'div', 'treePage-container')\r\n    this.node.style.backgroundImage='url(./public/assets/bgStartPage.jpg)'\r\n    this.chooseSection = new ChooseSection(this.node)\r\n\r\n    this.chooseSection.setCanvasTree=(tr:string)=>{\r\n      this.canvasSection.setCanvasTree(tr)\r\n    }\r\n    this.canvasSection=new CanvasSection(this.node)\r\n    this.chooseSection.setCanvasBackground=(bgImageIndex)=>{\r\n    this.canvasSection.setCanvasBackground(bgImageIndex)\r\n    }\r\n    this.toysSection= new ToysSection(this.node,filtersModel)\r\n     }\r\n}","//import data from \"../../data\";\r\nimport {IDiaposone, IDiaposoneData, IFiltersData, IToyData} from \"../../interfaces\";\r\n\r\nexport class FiltersModel {\r\n  private sortOrder: string[];\r\n  private currentToysData: IToyData[];\r\n  public onRedrawToys: (toysArray: IToyData[]) => void\r\n  private modifyFilters: boolean;\r\n  private filtersObj: { [key: string]: () => string[] };\r\n  private diaposoneObj: { [key: string]: IDiaposone };\r\n  private filtersData: IFiltersData;\r\n  private favorites: IToyData[];\r\n  toysData: IToyData[];\r\n\r\n  constructor(toysData:IToyData[]) {\r\n    this.toysData = toysData\r\n    this.currentToysData=JSON.parse(JSON.stringify(toysData))\r\n    this.sortOrder = []\r\n    this.modifyFilters = false\r\n    this.filtersObj = {\r\n      color: () => this.filterValuesChecked('color'),\r\n      shape: () => this.filterValuesChecked('shape'),\r\n      size: () => this.filterValuesChecked('size')\r\n    }\r\n    this.diaposoneObj = {\r\n      year: {from: 1940, to: 2020},\r\n      count: {from: 1, to: 12}\r\n    }\r\n    this.filtersData = {\r\n      shape: {\r\n        шар: false,\r\n        шишка: false,\r\n        снежинка: false,\r\n        фигурка: false,\r\n        колокольчик: false\r\n      },\r\n      color: {\r\n        красный: false,\r\n        желтый: false,\r\n        зелёный: false,\r\n        белый: false,\r\n        синий: false\r\n      },\r\n      size: {\r\n        малый: false,\r\n        средний: false, большой: false\r\n      }\r\n    }\r\n    this.favorites = []\r\n  }\r\n\r\n  public addFavorite(toy: IToyData) {\r\n    this.favorites.push(toy)\r\n  }\r\n\r\n  private filterValuesChecked(name: string) {\r\n    const arr: string[] = []\r\n    Object.entries(this.filtersData[name as keyof IFiltersData]).forEach(v => {\r\n      v[1] === true && arr.push(v[0])\r\n    })\r\n    if (arr.length === 0) {\r\n      Object.entries(this.filtersData[name as keyof IFiltersData]).forEach(v => arr.push(v[0]))\r\n    }\r\n    return arr\r\n  }\r\n\r\n  public setDiaposon(diaposonData: IDiaposoneData) {\r\n    const filterObject = this.diaposoneObj[diaposonData.name]\r\n    //console.log('$$$',filterObject[diaposonData.direction as keyof IDiaposone])\r\n    const oldData = filterObject[diaposonData.direction as keyof IDiaposone]\r\n    filterObject[diaposonData.direction as keyof IDiaposone] = +diaposonData.value\r\n   console.log(\"OLDnew\",oldData,'---',filterObject[diaposonData.direction as keyof IDiaposone])\r\n   //равны \r\n   if (oldData < filterObject[diaposonData.direction as keyof IDiaposone] || oldData === undefined) {\r\n      if (diaposonData.direction === 'from') {\r\n        this.extendFilters()\r\n      }\r\n      else {\r\n        console.log(\"insideElse\")\r\n        this.extendFilters()\r\n       // this.reduceFilters()\r\n      }\r\n    }\r\n    else if(oldData > filterObject[diaposonData.direction as keyof IDiaposone]) {  \r\n      //console.log('insideELSE')  \r\n      if (diaposonData.direction === 'from') {\r\n        this.extendFilters()\r\n       //console.log(\"OLDDD\",oldData)\r\n       // this.reduceFilters()\r\n      }\r\n      else {\r\n       // console.log(\"OLDDD\",oldData)\r\n      \r\n       this.reduceFilters()\r\n       // this.extendFilters()\r\n      }\r\n    }\r\n  }\r\n\r\n  public checkFilters(toy: IToyData) {\r\n    if (!(+toy.year <= this.diaposoneObj.year.to\r\n          && +toy.year >= this.diaposoneObj.year.from\r\n          && +toy.count <= this.diaposoneObj.count.to\r\n          && +toy.count >= this.diaposoneObj.count.from)) {\r\n      return\r\n    }\r\n    const results: boolean[] = []\r\n    Object.entries(this.filtersObj).forEach(filterSection => {\r\n      results.push(this.filtersObj[filterSection[0]]().some(filter => {\r\n        if (toy[filterSection[0] as keyof IToyData] === filter) {\r\n          return true\r\n        }\r\n      }))\r\n    })\r\n    return results.every(result => result === true)\r\n  }\r\n\r\n  createToysArray(arrayToCheck: IToyData[]) {\r\n    return Array.from(new Set(arrayToCheck.filter(e => {\r\n      return this.checkFilters(e)\r\n    })))\r\n  }\r\n\r\n  public reduceFilters() {\r\n    this.currentToysData = this.createToysArray(this.currentToysData);\r\n    if (this.sortOrder) {\r\n      this.currentToysData = this.useSort(this.currentToysData)\r\n    }\r\n    console.log(this.currentToysData)\r\n    this.onRedrawToys(this.currentToysData)\r\n  }\r\n\r\n  public extendFilters() {\r\n    console.log('extend',this.currentToysData)\r\n    const newD = this.toysData.filter(e => {\r\n      return this.checkFilters(e)\r\n    })\r\n    this.currentToysData = [...newD]\r\n\r\n    console.log(this.currentToysData)\r\n    if (this.sortOrder) {\r\n      this.currentToysData = this.useSort(this.currentToysData)\r\n    }\r\n    this.onRedrawToys(this.currentToysData)\r\n  }\r\n\r\n  private useSort(toys: IToyData[]) {\r\n    const sortedArray = toys.sort((a, b) => {\r\n      if (this.sortOrder[0] === 'alphabet') {\r\n        if (a.name > b.name) {\r\n          if (this.sortOrder[1] === 'direct') {\r\n            return 1\r\n          }\r\n          else {\r\n            return -1\r\n          }\r\n        }\r\n        else {\r\n          if (this.sortOrder[1] === 'direct') {\r\n            return -1\r\n          }\r\n          else {\r\n            return 1\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        if (+a.count > +b.count) {\r\n          (this.sortOrder[1] === 'direct')?1:-1\r\n          \r\n        }\r\n        else {\r\n          (this.sortOrder[1] === 'direct')?-1: 1\r\n          \r\n        }\r\n      }\r\n    })\r\n    return sortedArray\r\n  }\r\n\r\n  public setSortOrder(order: string): void {\r\n    this.sortOrder = order.split('-')\r\n    this.currentToysData = this.useSort(this.currentToysData)\r\n    this.onRedrawToys(this.currentToysData)\r\n    //  this.getData()\r\n  }\r\n\r\n  public setOneFilter(filterName: string, value: string) {\r\n    this.filtersData[filterName as keyof IFiltersData][value] = !this.filtersData[filterName as keyof IFiltersData][value]\r\n    if (this.filtersObj[filterName]().length === 1) {\r\n      this.reduceFilters()\r\n    }\r\n    else {\r\n      this.extendFilters()\r\n    }\r\n  }\r\n\r\n  public getFavorites() {\r\n\r\n  //return this.favorites.length ? this.favorites : data.filter((e, i) => i < 20)\r\n  return this.favorites.length && this.favorites \r\n\r\n  }\r\n}","export class SnowFlake {\r\n  private x: number;\r\n  private y: number;\r\n  private size: number;\r\n  private speed: number;\r\n  private frameX: number;\r\n  private frameY: number;\r\n  private frameSize: number;\r\n  private spin: number;\r\n  private canvas: HTMLCanvasElement;\r\n  private angle: number;\r\n  private blur: number;\r\n\r\n  constructor(canvas: HTMLCanvasElement) {\r\n    this.canvas = canvas\r\n    this.x = Math.random() * canvas.width\r\n    this.y = Math.random() * canvas.height\r\n    this.size = Math.random() * 60 + 20\r\n    this.speed = Math.random() * 0.5 + 0.2\r\n    this.frameX = Math.floor(Math.random() * 4)\r\n    this.frameY = Math.floor(Math.random() * 4)\r\n    this.frameSize = 250\r\n    this.angle = 0\r\n    this.spin = Math.random() > 0.5 ? 0.2 : -1\r\n    this.blur = Math.floor(Math.random() * 5)\r\n  }\r\n\r\n  update() {\r\n\r\n    this.y -= this.speed\r\n    if (this.y + this.size < 0) this.y = this.canvas.height + this.size\r\n    this.angle += this.spin\r\n  }\r\n\r\n  draw(flakes: HTMLImageElement) {\r\n    const ctx = this.canvas.getContext('2d')\r\n    ctx.save()\r\n    ctx.translate(this.x, this.y)\r\n    ctx.rotate(this.angle * Math.PI / 180)\r\n    //ctx.filter=`blur(2px)`\r\n    ctx.drawImage(flakes, this.frameX * this.frameSize,\r\n      this.frameY * this.frameSize, this.frameSize, this.frameSize,\r\n      0 - this.size / 2, 0 - this.size / 4, this.size, this.size)\r\n    ctx.restore()\r\n  }\r\n}","import Control from \"../common/controll\";\r\nimport './StartPage.css'\r\nimport { SnowFlake } from './snowFlake'\r\n//import { generateSnowFlake } from \"../Tree/canvasSection/snowFlakes\";\r\n\r\nexport class StartPage extends Control {\r\n  //private wrapper: Control<HTMLElement>;\r\n  private canvas: Control<HTMLCanvasElement>;\r\n  private ctx: CanvasRenderingContext2D;\r\n  private snowFlakes: HTMLImageElement;\r\n  private snowArray: SnowFlake[];\r\n  private backgoundImage: HTMLImageElement;\r\n  private startPageContainer: Control<HTMLElement>;\r\n  private startTitle: Control<HTMLElement>;\r\n  private startButton: Control<HTMLElement>;\r\n  public changePage: (page: string) => void\r\n  constructor(parentNode: HTMLElement) {\r\n    super(parentNode, 'div', 'startPage');\r\n    this.canvas = new Control(this.node, 'canvas', 'startPageCanvas')\r\n    this.canvas.node.width = window.innerWidth\r\n    this.canvas.node.height = window.innerHeight\r\n    this.ctx = this.canvas.node.getContext('2d')\r\n    this.backgoundImage = new Image()\r\n    this.backgoundImage.src = './public/assets/bgStartPage.jpg'\r\n    this.startPageContainer = new Control(this.node, 'div', 'startPageContainer')\r\n    this.startTitle = new StartButton(this.startPageContainer.node, 'startTitle', 'Игра \"Наряди елку\"')\r\n    this.startButton = new StartButton(this.startPageContainer.node, 'startButton', 'Начать игру')\r\n    this.startButton.node.onclick = () => {\r\n      this.changePage('tree')\r\n      this.destroy()\r\n    }\r\n    this.snowArray = []\r\n    for (let i = 0; i < 100; i++) {\r\n      this.snowArray.push(new SnowFlake(this.canvas.node))\r\n    }\r\n    this.snowFlakes = new Image()\r\n    this.snowFlakes.src = './public/assets/snowFlakes.png'\r\n    setInterval(() => this.handleSnowFlakes(this.snowFlakes)\r\n      , 1000 / 50)\r\n  }\r\n\r\n  handleSnowFlakes(flakes: HTMLImageElement) {\r\n    this.clear()\r\n    this.ctx.drawImage(this.backgoundImage, 0, 0, this.canvas.node.width, this.canvas.node.height)\r\n    for (let i = 0; i < this.snowArray.length; i++) {\r\n      this.snowArray[i].update()\r\n      this.snowArray[i].draw(flakes)\r\n    }\r\n  }\r\n  clear() {\r\n    this.ctx.clearRect(0, 0, this.canvas.node.width, this.canvas.node.height)\r\n  }\r\n}\r\nclass StartButton extends Control {\r\n  constructor(parentNode: HTMLElement, className: string, text: string) {\r\n    super(parentNode, 'div', className)\r\n    const textEl = new Control(this.node, 'p', '', text)\r\n  }\r\n}","import Control from \"./common/controll\";\r\nimport { Header } from \"./header/Header\";\r\nimport { SettingsPage } from \"./settingsPage/SettingsPage\";\r\nimport { TreePage } from \"./Tree/Tree\";\r\nimport { FiltersModel } from \"./settingsPage/filters/FiltersModel\";\r\nimport { IToyData } from \"./interfaces\";\r\nimport { StartPage } from \"./startPage/StartPage\";\r\nimport { PreloadData, toyItemData } from \"./index\";\r\n\r\nexport class App extends Control {\r\n  private header: Header;\r\n  private settingsPage: SettingsPage;\r\n  private treePage: TreePage;\r\n  private filtersModel: FiltersModel;\r\n  public addFavorite: (toyData: IToyData) => void\r\n  private startPage: StartPage;\r\n  backgroundsImages: HTMLImageElement[];\r\n  treesImages: HTMLImageElement[];\r\n  toysObj: toyItemData[];\r\n  constructor(parentNode: HTMLElement, data: PreloadData) {\r\n    super(parentNode, 'div','container')\r\n    this.backgroundsImages = data[0]\r\n    this.treesImages = data[1]\r\n    this.toysObj = data[2].toys\r\n    this.header = new Header(this.node)\r\n    this.startPage = new StartPage(this.node)\r\n    this.startPage.changePage = (page) => {\r\n      this.changePage(page)\r\n    }\r\n    this.filtersModel = new FiltersModel(this.toysObj)\r\n    this.header.changePage = (page) => {\r\n      this.changePage(page)\r\n    }\r\n    this.settingsPage.addFavorite = (toyData: IToyData) => {\r\n      this.filtersModel.addFavorite(toyData)\r\n    }\r\n  }\r\n  toggleNavPage(firstEl:Control,secondEl:Control){\r\n    firstEl && firstEl.destroy()\r\n    firstEl && firstEl.destroy()\r\n    secondEl && secondEl.destroy()\r\n  }\r\n  changePage(page: string) {\r\n    if (page === 'settings') {\r\n      console.log(this.treePage)\r\n      this.toggleNavPage(this.treePage,this.startPage)\r\n      this.settingsPage = new SettingsPage(this.node, this.filtersModel,this.toysObj)\r\n      this.settingsPage.addFavorite = (toyData: IToyData) => {\r\n        this.addFavorite(toyData)\r\n      }\r\n    } else if (page === 'tree') {\r\n      this.toggleNavPage(this.settingsPage,this.startPage)\r\n      this.treePage = new TreePage(this.node, this.filtersModel)\r\n    }\r\n  }\r\n}\r\n//TODO Button disabled\r\n","\nimport { App } from \"./app\";\nimport './styles.css'\nimport { generateSnowFlake } from \"./Tree/canvasSection/snowFlakes\";\nimport { canvasS, canvTree } from \"./garlandCanvas\";\nimport { CanvasMain } from \"./goodGarland\";\nexport type toyItemData = {\n  color: string,\n  count: string,\n  favorite: boolean,\n  name: string,\n  num: string,\n  shape: string,\n  size: string,\n  year: string\n}\nexport type PreloadData=[HTMLImageElement[], HTMLImageElement[], { toys:toyItemData [] }]\nconst bgArray = ['./public/assets/bg/1.jpg', './public/assets/bg/2.jpg', \n'./public/assets/bg/3.jpg', './public/assets/bg/4.jpg', './public/assets/bg/5.jpg', \n'./public/assets/bg/6.jpg', './public/assets/bg/7.jpg', './public/assets/bg/8.jpg', \n'./public/assets/bg/9.jpg', './public/assets/bg/10.jpg']\nconst treesArray=['./public/assets/tree/1.png', './public/assets/tree/2.png', \n'./public/assets/tree/3.png', './public/assets/tree/4.png', './public/assets/tree/5.png', \n'./public/assets/tree/6.png']\nconst toysObj = function () {\n  return new Promise((res, rej) => {\n    const fetchE = fetch('./public/assets/data.json')\n    fetchE.then((w) => {\n      res(w.json())\n    })\n  }\n  )\n\n}\nfunction getAsyncImages(array: string[]): Promise<HTMLImageElement[]> {\n  return new Promise((res, rej) => {\n    const pr = function (adr: string): Promise<HTMLImageElement> {\n      return new Promise((res, rej) => {\n        const img = new Image()\n        img.onload = () => {\n          return res(img)\n        }\n        img.src = adr\n      })\n    }\n    const prAll = async function processArray() {\n      const promises = array.map(name => pr(name));\n      return await Promise.all(promises);\n    }\n    const data = prAll()\n    console.log(data)\n    res(data)\n  })\n}\nconst promiseAllData=async ():Promise<any[]>=>{\n  const prAr=[getAsyncImages(bgArray),getAsyncImages(treesArray),toysObj()]\n  return await Promise.all(prAr)\n}\npromiseAllData().then((d:PreloadData)=>{\n  const app = new App(document.body,d)\n})\n//document.body.append(generateSnowFlake())\n// document.body.append(canvasS)\n// document.body.append(canvTree)\n\n// const canvasMain= new CanvasMain()\n// document.body.append(canvasMain.canvas)"],"names":["parentNode","tagName","className","content","el","document","createElement","textContent","append","this","node","setCanvasBackground","bgImageIndex","Error","destroy","remove","settingsButton","onclick","toggleDisable","treeButton","changePage","currentButton","anotherButton","setAttribute","getAttribute","removeAttribute","colorCellsWrapper","color","rgb","forEach","colorCell","style","background","classList","toggle","onChooseColor","shapesWrapper","shape","src","_shape","backgroundImage","onChooseShape","sizesWrapper","_size","ind","size","transform","onChooseSize","favorite","id","ByShapeFilter","ByColorFilter","BySizeFilter","Favorite","values","inputWidth","stepPercent","width","insideUnderLayer","secondInputWrapper","inputSecond","rangeAttributes","firstInputWrapper","inputFirst","debounce","secondThumb","left","onmouseover","secondThumbToggle","onmouseleave","oninput","e","finishSpanValue","target","value","rightMove","right","onchange","setTimeout","startSpanValue","leftMove","display","zIndex","val1","val2","val3","type","min","max","data","diaposoneContainer","titleText","containerClass","start","startClass","diaposoneRange","DiaposoneRange","limit","limitClass","innerText","onDiaposoneSectionSpanValue","name","valueName","direction","title","diaposoneSectionSpanValue","optionElement","form","select","console","log","sortOrder","optionsValues","_option","OptionElement","cancelFilters","valueSection","ValueSection","DiaposoneSection","setDiaposoneData","SortSection","order","setSortOrder","toyData","dataContainer","num","dataContent","count","year","addFavorite","drawSection","innerHTML","d","ToyItem","filtersModel","toysData","onRedrawToys","toysArray","decorationSection","filtersContainer","FilterContainer","setOneFilter","setDiaposon","DecorationSection","bgImages","treeImages","girlandColors","add","chooseBackground","chooseBackgroundButton","bgItems","bg","bgItem","chooseTree","treeImgs","treeImgsButton","tr","treeItem","setCanvasTree","chooseGirland","girlandButton","colorsList","col","startX","x","startY","y","index","toyImage","Image","Date","render","context","globalCompositeOperation","drawImage","image","height","secondCanvas","secondCtx","getContext","getImageData","isEmptyMap","Map","countX","countY","limitValues","rowObject","firstInRow","lastInRow","i","length","Math","floor","push","set","coordsForGarland","setLimitsForGarland","getGarlandCoords","limitsForGarland","checkPixel","get","getCursorPosition","event","rect","getBoundingClientRect","clientX","clientY","top","pick","ctx","random","speedY","speedX","maxSize","vs","angleX","angleY","vax","vay","lightness","fillStyle","angle","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","update","sin","va","save","translate","rotate","fillRect","lineWidth","strokeStyle","strokeRect","requestAnimationFrame","bind","restore","newCanvas","newCtx","draw","garlandCoordinates","xDistance","steps","ceil","xStep","currentStep","inter","setInterval","Dot","updateCoords","clearInterval","setCoords","toysOnTree","canvasSection","canvasWidth","canvasHeight","offsetX","offsetY","prevPosX","mouseDownHandlerBinded","mouseDownHandler","moveHandlerBinded","moveHandler","offsetTreeCanvasWidth","offsetTreeCanvasHeight","addEventListener","canvasBackground","canvasTree","maskCanvas","createGarland","CreateGarland","ondragover","preventDefault","ondrop","isOverCanvas","toy","ToyImage","dataTransfer","getData","prevPosY","currentToy","getCurrentToy","drawScene","onmouseup","canvasX","canvasY","deleteToy","removeEventListener","smallFoo","garCanvas","clearRect","drawBackground","drawTree","delToy","filter","createImage","bgOnload","treeImageIndex","treeOnload","url","callcack","onload","canvasImage","treeImage","MaskCanvas","newCoords","map","chooseSection","ChooseSection","CanvasSection","toysSection","ToysSection","currentToysData","JSON","parse","stringify","modifyFilters","filtersObj","filterValuesChecked","diaposoneObj","from","to","filtersData","favorites","arr","Object","entries","v","diaposonData","filterObject","oldData","undefined","extendFilters","reduceFilters","checkFilters","results","filterSection","some","every","result","createToysArray","arrayToCheck","Array","Set","useSort","newD","toys","sort","a","b","split","filterName","getFavorites","canvas","speed","frameX","frameY","frameSize","spin","blur","flakes","PI","window","innerWidth","innerHeight","backgoundImage","startPageContainer","startTitle","StartButton","startButton","snowArray","SnowFlake","snowFlakes","handleSnowFlakes","clear","text","backgroundsImages","treesImages","toysObj","header","Header","startPage","StartPage","page","FiltersModel","settingsPage","toggleNavPage","firstEl","secondEl","treePage","SettingsPage","TreePage","bgArray","treesArray","getAsyncImages","array","Promise","res","rej","promises","adr","img","all","prAll","prAr","fetch","then","w","json","App","body"],"sourceRoot":""}